@model RecoreForm
@{ 
    string RenderField(RecoreFormField field)
    {
        string config = field.Config == null ? "" : "v-bind:config=\"{" + string.Join(",",field.Config.Select(c => $"{c.Key}: '{c.Value}'")) + "}\"";
        return $"<{field.FieldType} label=\"{ field.Label}\" name=\"{field.Name}\" v-bind:value=\"model.{field.Field}\" v-on:recorechange=\"model.{field.Field} = $event\" {config}></{field.FieldType}>";
    }
}
<h1>@Model.FormName</h1>
<div id="app">
    <form class="" id="form">
        @foreach (var field in Model.Fields)
        {
            @Html.Raw(RenderField(field))
        }

        <button class="btn btn-default" id="button" v-on:click="SubmitForm">Save</button>
    </form>
</div>
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script type="text/javascript">
    @foreach(string component in (IEnumerable<string>)ViewData["components"])
    {
        @Html.Raw(component)
    }
    var app = new Vue({
        el: "#app",
        data: {
            fields: [
                @foreach (var item in Model.Fields)
                {
                    <text>
                    {
                        field: '@item.Field',
                        name: '@item.Name'
                    },
                    </text>
                }
            ],
            recordType:'@Model.RecordType', 
            recordId: '@ViewData["id"]',
            model: {},
        },
        methods: {
            SubmitForm() {
                    var request = new XMLHttpRequest();
                    if (this.recordId == '') {
                        request.open("POST", "/data/" + this.recordType + "/");
                    }
                    else {
                        request.open("PATCH", "/data/" + this.recordType + "/" + this.recordId + "/");
                    }
                    request.setRequestHeader("Content-Type", "application/json");
                    request.onload = function () {
                        if (request.status >= 200 && request.status < 300) {
                            if (this.recordId === '') {
                                this.recordId = JSON.parse(request.responseText);
                            }
                            window.location.href="/Form/@Model.FormId/" + this.recordId
                        }
                        else {
                            alert(request.responseText);
                        }
                    }
                    var send = {};
                    this.fields.forEach(function (field) {
                        send[field.field] = app.model[field.field];
                    });
                    request.send(JSON.stringify({ data: send }));
            },
            GetFormFields() {
                var output = [];
                this.fields.forEach(function (field) {
                    if (output.indexOf(field.field) == -1) {
                        output.push(field.field);
                    }
                });
                return output;
            },
            LoadForm() {
                var request = new XMLHttpRequest();
                request.open("GET", "/data/" + this.recordType + "/" + this.recordId + "?columns=" + this.GetFormFields().join(","));
                request.onload = function () {
                    if (request.status >= 200 && request.status < 300) {
                        app.model = JSON.parse(request.responseText).data;
                    }
                    else {
                        alert(request.responseText);
                    }

                }
                request.send();
            }
        },
        mounted: function () {
            if (this.recordId != '') {
                this.LoadForm();
            }
        },
    });
</script>